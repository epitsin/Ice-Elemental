#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FluentMappingGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using FurnitureSystem.MySqlDbContext;
using Telerik.OpenAccess.Metadata.Relational;

namespace FurnitureSystem.MySqlDbContext
{

	public partial class FurnitureSystemEntitiesMetadataSource : FluentMetadataSource
	{
		
		protected override IList<MappingConfiguration> PrepareMapping()
		{
			List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>();
			
			MappingConfiguration<Shop> shopConfiguration = this.GetShopMappingConfiguration();
			mappingConfigurations.Add(shopConfiguration);
			
			MappingConfiguration<Section> sectionConfiguration = this.GetSectionMappingConfiguration();
			mappingConfigurations.Add(sectionConfiguration);
			
			MappingConfiguration<Price> priceConfiguration = this.GetPriceMappingConfiguration();
			mappingConfigurations.Add(priceConfiguration);
			
			MappingConfiguration<Manufacturer> manufacturerConfiguration = this.GetManufacturerMappingConfiguration();
			mappingConfigurations.Add(manufacturerConfiguration);
			
			MappingConfiguration<Location> locationConfiguration = this.GetLocationMappingConfiguration();
			mappingConfigurations.Add(locationConfiguration);
			
			MappingConfiguration<FurniturePiece> furniturepieceConfiguration = this.GetFurniturePieceMappingConfiguration();
			mappingConfigurations.Add(furniturepieceConfiguration);
			
			MappingConfiguration<Colour> colourConfiguration = this.GetColourMappingConfiguration();
			mappingConfigurations.Add(colourConfiguration);
			
			MappingConfiguration<__MigrationHistory> __migrationhistoryConfiguration = this.Get__MigrationHistoryMappingConfiguration();
			mappingConfigurations.Add(__migrationhistoryConfiguration);
			
			return mappingConfigurations;
		}
		
		protected override void SetContainerSettings(MetadataContainer container)
		{
			container.Name = "FurnitureSystemEntities";
			container.DefaultNamespace = "FurnitureSystem.MySqlDbContext";
			container.NameGenerator.SourceStrategy = Telerik.OpenAccess.Metadata.NamingSourceStrategy.Property;
			container.NameGenerator.RemoveCamelCase = false;
		}
		public MappingConfiguration<Shop> GetShopMappingConfiguration()
		{
			MappingConfiguration<Shop> configuration = this.GetShopClassConfiguration();
			this.PrepareShopPropertyConfigurations(configuration);
			this.PrepareShopAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Shop> GetShopClassConfiguration()
		{
			MappingConfiguration<Shop> configuration = new MappingConfiguration<Shop>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Shops");
	
			return configuration;
		}
	
		public void PrepareShopPropertyConfigurations(MappingConfiguration<Shop> configuration)
		{
			configuration.HasProperty(x => x.Id).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_id").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Id").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("_name").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareShopAssociationConfigurations(MappingConfiguration<Shop> configuration)
		{
			configuration.HasAssociation(x => x.Location).HasFieldName("_location").WithOpposite(x => x.Shop).ToColumn("ShopId").HasConstraint((y, x) =>  x.ShopId == y.Id ).IsManaged().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.FurniturePieces).HasFieldName("_furniturePieces").WithOpposite(x => x.Shops).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Section> GetSectionMappingConfiguration()
		{
			MappingConfiguration<Section> configuration = this.GetSectionClassConfiguration();
			this.PrepareSectionPropertyConfigurations(configuration);
			this.PrepareSectionAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Section> GetSectionClassConfiguration()
		{
			MappingConfiguration<Section> configuration = new MappingConfiguration<Section>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Sections");
	
			return configuration;
		}
	
		public void PrepareSectionPropertyConfigurations(MappingConfiguration<Section> configuration)
		{
			configuration.HasProperty(x => x.Id).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_id").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Id").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("_name").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.ManufacturerId).HasFieldName("_manufacturerId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ManufacturerId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareSectionAssociationConfigurations(MappingConfiguration<Section> configuration)
		{
			configuration.HasAssociation(x => x.Manufacturer).HasFieldName("_manufacturer").WithOpposite(x => x.Sections).ToColumn("ManufacturerId").HasConstraint((x, y) =>  x.ManufacturerId == y.Id ).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.FurniturePieces).HasFieldName("_furniturePieces").WithOpposite(x => x.Section).ToColumn("SectionId").HasConstraint((y, x) =>  x.SectionId == y.Id ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Price> GetPriceMappingConfiguration()
		{
			MappingConfiguration<Price> configuration = this.GetPriceClassConfiguration();
			this.PreparePricePropertyConfigurations(configuration);
			this.PreparePriceAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Price> GetPriceClassConfiguration()
		{
			MappingConfiguration<Price> configuration = new MappingConfiguration<Price>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Prices");
	
			return configuration;
		}
	
		public void PreparePricePropertyConfigurations(MappingConfiguration<Price> configuration)
		{
			configuration.HasProperty(x => x.Id).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_id").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Id").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Money).HasFieldName("_money").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Money").IsNotNullable().HasColumnType("decimal").HasPrecision(18).HasScale(2);
		}
	
		public void PreparePriceAssociationConfigurations(MappingConfiguration<Price> configuration)
		{
			configuration.HasAssociation(x => x.FurniturePieces).HasFieldName("_furniturePieces").WithOpposite(x => x.Price).ToColumn("PriceId").HasConstraint((y, x) =>  x.PriceId == y.Id ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Manufacturer> GetManufacturerMappingConfiguration()
		{
			MappingConfiguration<Manufacturer> configuration = this.GetManufacturerClassConfiguration();
			this.PrepareManufacturerPropertyConfigurations(configuration);
			this.PrepareManufacturerAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Manufacturer> GetManufacturerClassConfiguration()
		{
			MappingConfiguration<Manufacturer> configuration = new MappingConfiguration<Manufacturer>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Manufacturers");
	
			return configuration;
		}
	
		public void PrepareManufacturerPropertyConfigurations(MappingConfiguration<Manufacturer> configuration)
		{
			configuration.HasProperty(x => x.Id).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_id").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Id").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("_name").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareManufacturerAssociationConfigurations(MappingConfiguration<Manufacturer> configuration)
		{
			configuration.HasAssociation(x => x.Sections).HasFieldName("_sections").WithOpposite(x => x.Manufacturer).ToColumn("ManufacturerId").HasConstraint((y, x) =>  x.ManufacturerId == y.Id ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Location> GetLocationMappingConfiguration()
		{
			MappingConfiguration<Location> configuration = this.GetLocationClassConfiguration();
			this.PrepareLocationPropertyConfigurations(configuration);
			this.PrepareLocationAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Location> GetLocationClassConfiguration()
		{
			MappingConfiguration<Location> configuration = new MappingConfiguration<Location>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Locations");
	
			return configuration;
		}
	
		public void PrepareLocationPropertyConfigurations(MappingConfiguration<Location> configuration)
		{
			configuration.HasProperty(x => x.ShopId).IsIdentity().HasFieldName("_shopId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ShopId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Country).HasFieldName("_country").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Country").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.City).HasFieldName("_city").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("City").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.Street).HasFieldName("_street").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Street").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.Number).HasFieldName("_number").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Number").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareLocationAssociationConfigurations(MappingConfiguration<Location> configuration)
		{
			configuration.HasAssociation(x => x.Shop).HasFieldName("_shop").WithOpposite(x => x.Location).ToColumn("ShopId").HasConstraint((x, y) =>  x.ShopId == y.Id ).IsManaged().IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<FurniturePiece> GetFurniturePieceMappingConfiguration()
		{
			MappingConfiguration<FurniturePiece> configuration = this.GetFurniturePieceClassConfiguration();
			this.PrepareFurniturePiecePropertyConfigurations(configuration);
			this.PrepareFurniturePieceAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<FurniturePiece> GetFurniturePieceClassConfiguration()
		{
			MappingConfiguration<FurniturePiece> configuration = new MappingConfiguration<FurniturePiece>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("FurniturePieces");
	
			return configuration;
		}
	
		public void PrepareFurniturePiecePropertyConfigurations(MappingConfiguration<FurniturePiece> configuration)
		{
			configuration.HasProperty(x => x.Id).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_id").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Id").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("_name").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.Type).HasFieldName("_type").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Type").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Material).HasFieldName("_material").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Material").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SectionId).HasFieldName("_sectionId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SectionId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PriceId).HasFieldName("_priceId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PriceId").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareFurniturePieceAssociationConfigurations(MappingConfiguration<FurniturePiece> configuration)
		{
			configuration.HasAssociation(x => x.Price).HasFieldName("_price").WithOpposite(x => x.FurniturePieces).ToColumn("PriceId").HasConstraint((x, y) =>  x.PriceId == y.Id ).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Section).HasFieldName("_section").WithOpposite(x => x.FurniturePieces).ToColumn("SectionId").HasConstraint((x, y) =>  x.SectionId == y.Id ).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Shops).HasFieldName("_shops").WithOpposite(x => x.FurniturePieces).WithDataAccessKind(DataAccessKind.ReadWrite).MapJoinTable("ShopFurniturePieces", (x, y) => new{FurniturePiece_Id = x.Id, Shop_Id = y.Id}).CreatePrimaryKeyFromForeignKeys();
			configuration.HasAssociation(x => x.Colours).HasFieldName("_colours").WithOpposite(x => x.FurniturePieces).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Colour> GetColourMappingConfiguration()
		{
			MappingConfiguration<Colour> configuration = this.GetColourClassConfiguration();
			this.PrepareColourPropertyConfigurations(configuration);
			this.PrepareColourAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Colour> GetColourClassConfiguration()
		{
			MappingConfiguration<Colour> configuration = new MappingConfiguration<Colour>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("Colours");
	
			return configuration;
		}
	
		public void PrepareColourPropertyConfigurations(MappingConfiguration<Colour> configuration)
		{
			configuration.HasProperty(x => x.Id).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_id").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Id").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Name).HasFieldName("_name").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareColourAssociationConfigurations(MappingConfiguration<Colour> configuration)
		{
			configuration.HasAssociation(x => x.FurniturePieces).HasFieldName("_furniturePieces").WithOpposite(x => x.Colours).WithDataAccessKind(DataAccessKind.ReadWrite).MapJoinTable("FurniturePieceColours", (x, y) => new{Colour_Id = x.Id, FurniturePiece_Id = y.Id}).CreatePrimaryKeyFromForeignKeys();
		}
		
		public MappingConfiguration<__MigrationHistory> Get__MigrationHistoryMappingConfiguration()
		{
			MappingConfiguration<__MigrationHistory> configuration = this.Get__MigrationHistoryClassConfiguration();
			this.Prepare__MigrationHistoryPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<__MigrationHistory> Get__MigrationHistoryClassConfiguration()
		{
			MappingConfiguration<__MigrationHistory> configuration = new MappingConfiguration<__MigrationHistory>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("__MigrationHistory");
	
			return configuration;
		}
	
		public void Prepare__MigrationHistoryPropertyConfigurations(MappingConfiguration<__MigrationHistory> configuration)
		{
			configuration.HasProperty(x => x.MigrationId).IsIdentity().HasFieldName("_migrationId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MigrationId").IsNotNullable().HasColumnType("nvarchar").HasLength(150);
			configuration.HasProperty(x => x.ContextKey).IsIdentity().HasFieldName("_contextKey").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ContextKey").IsNotNullable().HasColumnType("nvarchar").HasLength(300);
			configuration.HasProperty(x => x.Model).HasFieldName("_model").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Model").IsNotNullable().HasColumnType("varbinary(max)");
			configuration.HasProperty(x => x.ProductVersion).HasFieldName("_productVersion").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProductVersion").IsNotNullable().HasColumnType("nvarchar").HasLength(32);
		}
	}
}
#pragma warning restore 1591
